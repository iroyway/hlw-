{"./":{"url":"./","title":"前言","keywords":"","body":"简介 本页面记录自己的学习互联网之路的一些教程，朋友如果有需要可以借鉴一下，教程都来源于网络，如果有侵权请联系删除。 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-16 15:12:05 "},"git/":{"url":"git/","title":"git相关","keywords":"","body":" git常用操作 git问题合辑 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-13 22:20:30 "},"git/chaozuo.html":{"url":"git/chaozuo.html","title":"git常用操作","keywords":"","body":"git常用操作 关联远程仓库 git remote add origin https://github.com/iroyway/hlw.git 代码颜色--> git remote add origin https://github.com/iroyway/hlw.git 取消关联远程仓库 git remote remove origin git branch -M master git push -u origin master 查看库中的所有分支 git branch -v 建立分支并进入分支 git checkout -b “分支名” Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-04 22:12:13 "},"git/wenti.html":{"url":"git/wenti.html","title":"git问题合辑","keywords":"","body":"git常见问题解决方法 Git 冲突：commit your changes or stash them before you can merge 的解决办法 放弃本地修改，直接使用远程仓库里的最新代码（这样你可以确保你修改的代码是在别人最新的代码基础上进行的）。具体命令为： git reset --hard git pull Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-04 22:22:42 "},"gitbook/":{"url":"gitbook/","title":"gitbook相关","keywords":"","body":"gitbook简介 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-13 20:09:53 "},"gitbook/gitbook.html":{"url":"gitbook/gitbook.html","title":"gitbook安装及使用","keywords":"","body":"gitbook安装 初始化git gitbook init 服务打开 gitbook serve 安装插件 gitbook install 创建仓库与分支 登陆到Github，创建一个新的仓库，名称我们就命名为book，这样我就得到一个book仓库。 克隆仓库到本地： git clone git@github.com:/USER_NAME/book.git 创建一个新分支： git checkout -b gh-pages，注意，分支名必须为gh-pages。 将分支push到仓库： git push -u origin gh-pages。 切换到主分支：git checkout master。 经过这一步处理，我们已经创建了gh-pages分支了，有了这个分支，Github会自动为你分配一个网址。 http://USERNAME.github.io/book 你可以在项目页面右下角setting中看到： 同步静态网站代码到分支 下面我们就可以将build好的静态网站代码同步到gh-pages分支中去了： 切换出master分支目录。我们需要将gh-pages分支内容存放在另外一个目录中 克隆gh-pages分支： git clone -b gh-pages git@github.com:USER_NAME/book.git book-end 这步我们只是克隆了gh-pages分支，并存放在一个新的目录book-end。 Copy静态网站到book-end目录中 Push到仓库 然后，等十来分钟后，你就可以访问到你的在线图书了。以后，只要你每次修改之后，将生成静态网站Copy到book-end目录，然后Push一下就OK了。 如何为目录添加序号 Gitbook默认的目录没有序号，在book.json中pluginsConfig字段添加theme-default的配置填入以下代码，增加序号，增加美观性 \"theme-default\": { \"showLevel\": true }, Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-13 22:40:59 "},"gitbook/gitbookchajian.html":{"url":"gitbook/gitbookchajian.html","title":"gitbook插件","keywords":"","body":"gitbook插件 自己常用的gitbook插件 代码复制 \"code\" 文件和目录自己调整 \"splitter\" 隐藏不必要的链接 \"hide-element\" 目录悬浮 \"page-toc-button\" 回到顶部 \"back-to-top-button\" 导航目录折叠 \"chapter-fold\" 页面底部添加信息 \"tbfed-pagefooter\" prism插件 系统自带插件的高亮功能并不完善，可使用prism插件增强，该插件需要先禁用highlight插件``` \"-highlight\", \"prism\" 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"]{ border: none; background-color:#f7f7f7; font-size:1em; line-height:1.2em; } 插件安装 gitbook install 整个代码如下： { \"title\": \"我的互联网之路学习笔记\", \"author\": \"iroyway\", \"links\" : { \"sidebar\" : { \"Home\" : \"https://iroyway.github.io/hlw/\" } }, \"plugins\": [ \"-lunr\", \"-search\", \"-highlight\", \"prism\", \"code\", \"search-pro\", \"splitter\", \"-chapter-fold\", \"hide-element\", \"page-toc-button\", \"back-to-top-button\", \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"hide-element\": { \"elements\": [ \".gitbook-link\" ] }, \"page-toc-button\": { \"maxTocDepth\": 2, \"minTocSize\": 2 }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright &copy iroyway 2019 all right reserved.powered by Gitbook\", \"modify_label\": \"该文章修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ] }, \"theme-default\": { \"showLevel\": true } } } Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-13 23:04:51 "},"gitbook/gitbooktuoguan.html":{"url":"gitbook/gitbooktuoguan.html","title":"gitbook托管","keywords":"","body":"将_book发布到pages上 Pages 是github类网站提供的免费的静态网页托管服务，既然GitBook能生成基于HTTML的静态电子书籍，那自然而然，我们就会有将GitBook静态页面发布到pages服务的需求。 除了能够将书籍发布到GitBook.com外，用户还可以将电子书发布到提供Pages服务的GitHub类站点上，如国内的oschina、coding.net等等。这样做有个好处，就是访问速度比gitbook.com快很多。 这个需求情景实际上是git的应用，即将书籍的源码存放到仓库的master分支，而将书籍的html版本存放到仓库的pages分支， 将书籍源码托管到git远端仓库 这一环节的任务就是将书籍的源码（不含gitbook build生成的内容）推送到远端仓库。 新建仓库 在GitBook项目目录，如mybook中，执行如下命令，创建本地git仓库： git init 添加忽略文件 使用文本编辑器，创建名为.gitignore的文件，内容如下： *~ _book .DS_Store 通过.gitignore文件，本地仓库将忽略临时文件和_book文件夹，达到只保存书籍源码的目的。 添加文件 现在可以将本地书籍源码添加到本地git仓库中了： git add . 添加更新说明 git commit -m '更新说明文字' 建立本地仓库与远端仓库的对应关系 git remote add origin https://远程仓库地址.git 推送 将本地仓库内容同步到远端仓库： git push -u origin master 至此，就完成了将gitbook源码推送到远程仓库的任务，之后书籍内容修改后，执行如下操作即可： git add . git commit -m '更新说明文字' git push -u origin master 使用pages服务展示gitbook书籍 接下来，需要在原有本地仓库新建一个分支，在这个分支中，只保留_book文件夹中的内容，然后将这些内容推送到远程仓库的pages分支，启用pages服务，最终达到免费发布电子书的目的。 新建分支 git checkout --orphan pages 新建名为pages的分支，分支名称随意，但最好能反映出分支的用途。 删除不需要的文件 切换到pages分支后，我们需要将_books目录之外的文件都清理掉： git rm --cached -r . git clean -df rm -rf *~ 添加忽略文件 使用文本编辑器，创建名为.gitignore的文件，内容如下： *~ _book .DS_Store 通过.gitignore文件，本地仓库将忽略临时文件和_book文件夹。 复制_book文件夹到分支根目录 cp -r _book/* . 添加文件 git add . 添加更新说明 git commit -m '更新说明' 推送 git push -u origin pages 现在开启git托管网站的pages服务即可。 上述任务的自动化脚本 命令行的精髓在于可以自动执行，如下面的脚本，可以完成同时更新master分支和pages分支的目的。 git checkout master git add . git commit -m $1 git push -u origin master git checkout pages cp -r _book/* . git add . git commit -m $1 git push -u origin pages git checkout master 在需要更新的时候，执行如下命令： sh gitbook.sh '更新说明' Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-13 22:36:01 "},"gcp/lianjie.html":{"url":"gcp/lianjie.html","title":"gcp相关","keywords":"","body":"密钥连接 1、首先在本地创建公钥和私钥 ssh-keygen -t rsa -f ~/.ssh/[KEY_FILENAME] -C [USERNAME] [KEY_FILENAME]：您要用于 SSH 密钥文件的名称。例如，文件名 my-ssh-key 生成一个名为 my-ssh-key 的私钥文件和一个名为 my-ssh-key.pub 的公钥文件。 [USERNAME]：连接到虚拟机的用户的名称。例如 cloudysanfrancisco@gmail.com 或 cloudysanfrancisco。 详细请查看：https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys?hl=zh-cn 2、复制公钥 cat [KEY_FILENAME].pub 3、导入公钥 进入谷歌云平台页面 -> 计算引擎 -> 元数据 -> SSH 密钥，粘贴保存 谷歌就会把上面这段 public key 写入到 ~/.ssh/authorized_keys 4、本地通过私钥登录 finalshell 要转换格式 Termius 注意设置的时候要导入私钥 用本地终端连接 ssh -i [KEY_FILENAME] [USERNAME]@主机IP Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-05 12:00:30 "},"docker/":{"url":"docker/","title":"docker相关","keywords":"","body":"docker是什么 docker是一个轻量级的应用 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-13 18:40:51 "},"docker/dockermingding.html":{"url":"docker/dockermingding.html","title":"docker常用命令","keywords":"","body":"docker 命令 docker安装命令 Docker安装 国内一键安装 sudo curl -sSL https://get.daocloud.io/docker | sh 国外一键安装 sudo curl -sSL get.docker.com | sh 北京外国语大学开源软件镜像站 https://mirrors.bfsu.edu.cn/help/docker-ce/docker-compose 安装（群晖nas docker自带安装了docker-compose） sudo curl -L \"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Ubuntu用户快速安装docker-compose sudo apt-get update && sudo apt-get install -y python3-pip curl vim git moreutils pip3 install --upgrade pip pip install docker-compose 通过docker-compose version查看docker-compose版本，确认是否安装成功。 docker常用操作命令 查看docker信息 下面jd_scripts为docker容器名字 docker ps -a docker container inspect id/name docker exec -it jd_scripts /bin/sh 您可以使用以下命令从主机上运行的程序中删除文件 docker exec rm -rf 手动运行一下所有脚本 docker exec -it jd_scripts /bin/sh -c 'ls jd_*.js |xargs -i node {}' 群辉docker执行下面命令 docker exec -it jd_scripts /bin/sh -c 'cd /scripts;ls jd_*.js' 可能会用到的命令手动运行一脚本 docker exec -it jd_scripts /bin/sh -c 'git -C /scripts pull && node /scripts/jd_bean_change.js' 查看设置的环境变量 docker exec -it jd_scripts /bin/sh -c 'env' 查看已生效的crontab_list定时器任务 docker exec -it jd_scripts /bin/sh -c 'crontab -l' 手动更新jd_scripts仓库最新脚本 docker exec -it jd_scripts sh -c \"docker_entrypoint.sh\" 仅进入容器命令 docker exec -it jd_scripts /bin/sh 删除logs文件夹里面所有的日志文件 rm -rf logs/*.log docker portainer安装 1、安装先拉取最新的镜像： docker pull portainer/portainer:latest 为Portainer创建一个volume： docker volume create portainer_data 一条命令启动： docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer 注意--restart=always作用是Docker重启时，自动重启容器。 成功启动后，访问地址http://localhost:9000/就可以了。 docker portainer密码重置 1、使用如下命令获取 portainer 的名称或者 ID docker ps -a 2、使用如下命令查看 portainer 的详细信息 docker inspect portainer ID 3、查看Hostconfig中Binds字段替换下面的portainer_data:/data字段 4、使用 portainer 官方提供的重置密码的工具（https://github.com/portainer/helper-reset-password） stop the existing Portainer container docker container stop portainer run the helper using the same bind-mount/volume for the data volume docker run --rm -v portainer_data:/data portainer/helper-reset-password 2020/06/04 00:13:58 Password succesfully updated for user: admin 2020/06/04 00:13:58 Use the following password to login: &_4#\\3^5V8vLTd)E\"NWiJBs26G*9HPl1 restart portainer and use the password above to login docker container start portainer ``` Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-16 18:38:46 "},"docker/dockerimages/":{"url":"docker/dockerimages/","title":"docker常用镜像","keywords":"","body":"这是包含docker镜像的目录 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-16 15:00:02 "},"docker/dockerimages/redrain.html":{"url":"docker/dockerimages/redrain.html","title":"docker镜像redrain","keywords":"","body":"redrain镜像 dockerhub地址：nevinee/redrain将脚本命名为redrain.py，修改为你自己的信息。在redrain.py同目录下，建立docker-compose.yml文件，内容如下： version: \"2.0\" services: redrain: image: nevinee/redrain container_name: redrain restart: always tty: true network_mode: bridge hostname: redrain volumes: - ./:/redrain #security_opt: #armv7设备请解除这两行注释，注意，这会降低容器的安全性，但不这样做你就无法正常使用容器，cli则为--security-opt seccomp=unconfined #- seccomp=unconfined 在上述两个文件的保存目录下创建容器（自行安装好docker-compose）。 docker-compose up -d 首次部署容器时，需要按以下流程初始化。 docker exec -it redrain pm2 stop redrain docker exec -it redrain python redrain.py 按提示输入信息以后，Ctrl+C退出运行，然后以下一条命令重启容器 docker-compose restart 后续修改redrain.py，容器会自动重启pm2进程，无需重启容器。重启容器、更新容器、重建容器不再需要进行初始化操作，容器启动后自动启动redrain.py。查看日志： docker exec -it redrain pm2 logs docker exec -it redrain pm2 monit docker logs -f redrain Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-16 14:45:46 "},"docker/dockerimages/python.html":{"url":"docker/dockerimages/python.html","title":"docker镜像python39","keywords":"","body":"python镜像（暂用） dockerhub地址：nevinee/python基于python官方版本docker集成了bash openssl coreutils moreutils git wget curl nano tzdata perl，默认时区Asia/Shanghai。 创建： docker run -dit \\ -v /宿主机上的目录/:/root \\ --name python \\ --hostname python \\ nevinee/python 然后进入容器，你想干啥就干啥： docker exec -it python bash 如果映射目录下存在crontab.list，将在创建后以它作为容器的定时任务。 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-16 14:44:15 "},"docker/dockerbiji/dockerbiji.html":{"url":"docker/dockerbiji/dockerbiji.html","title":"docker使用笔记","keywords":"","body":"docker学习随笔 Alpnie linux 操作 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-22 12:17:02 "},"yangmao/":{"url":"yangmao/","title":"薅羊毛","keywords":"","body":"网络收集各种薅羊毛 以下信息均来自网络，自用 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-16 20:56:28 "},"yangmao/jingdongyangmao.html":{"url":"yangmao/jingdongyangmao.html","title":"京东羊毛","keywords":"","body":"Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-16 20:56:45 "},"docker/dockerbiji/Alpine.html":{"url":"docker/dockerbiji/Alpine.html","title":"docker使用笔记","keywords":"","body":"Alpine Linux 提示'/bin/sh: rc-service: not found'解决方案 https://blog.csdn.net/qq_39629343/article/details/81501507 /bin/sh: /sbin/openrc-run: not found Alpine使用的是OpenRCinit系统，而rc-service是openrc的一部分，所以安装openrc即可，使用如下命令安装： apk add openrc --no-cache https://blog.csdn.net/freeking101/article/details/80795752 From：https://www.aliyun.com/jiaocheng/137717.html Alpine Linux、CoreOS、RancherOS、Red Hat 原子项目、 VMware光子操作系统比较 https://blog.csdn.net/hxpjava1/article/details/78482987 Alpine Linux配置使用技巧：https://www.aliyun.com/jiaocheng/137717.html alpinelinux 官网：https://www.alpinelinux.org Alpine Linux使用简介 目录： 一、Alpine简要介绍 二、Alpine本地安装 三、Alpine在Docker下运行 四、Alpine的配置和使用 4.1网络相关文件 4.2更新国内源 4.3软件包管理工具apk的基本使用 4.4开启SSH服务 4.5安装nginx 一、Alpine简要介绍 Alpine 的意思是“高山的”，比如 Alpine plants高山植物，Alpine skiing高山滑雪、the alpine resort阿尔卑斯山胜地。 Alpine Linux 网站首页注明“Small！Simple！Secure！Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.”概括了以下特点： 1、小巧：基于Musl libc和busybox，和busybox一样小巧，最小的Docker镜像只有5MB； 2、安全：面向安全的轻量发行版； 3、简单：提供APK包管理工具，软件的搜索、安装、删除、升级都非常方便。 4、适合容器使用：由于小巧、功能完备，非常适合作为容器的基础镜像。 二、Alpine本地安装 Alpine Linux是一个完整的操作系统，像其他操作系统一样，可以将Alpine安装到本地硬盘中。我们可以创建一个VirtualBox虚拟机，在VirtualBox 下安装该系统，以便进行测试使用。具体安装过程，参见我写的另一篇文章《Alpine linux硬盘安装》，地址：http://blog.csdn.net/csdn_duomaomao/article/details/76053229。 主要是在安装过程中，指定一些电脑的基本设置，比如键盘布局、主机名、网卡、IP地址、root口令修改、时区设置、软件仓库地址、SSH服务器、NTP客户端、系统安装方式、磁盘格式化等。 三、Alpine在Docker下运行 1、Docker下的运行 官方 Alpine 镜像的文档：http://gliderlabs.viewdocs.io/docker-alpine/ 可以使用Docker Toolbox，创建一台Docker虚拟主机，在该主机的Docker环境下运行alpine的 Docker容器。该容器就是一个Alpine Linux系统， docker pull alpine docker run -it --name myalpine alpine 2、作为Docker容器的基础镜像 以Alpine为基础镜像，创建一个MySQL容器，镜像大小只有36.5MB， 同样的方式使用Ubuntu系统作为基础镜像，镜像大小有184MB， Dockerfile文件的内容： FROM alpine:3.6 RUN apk add --no-cache mysql-client ENTRYPOINT [\"mysql\"] 创建一个test/mysqlclient:1.0镜像 docker build -t test/mysqlclient:1.0 . 四、Alpine的配置和使用 4.1网络相关文件 主机名文件 /etc/hostname 使用新设置的主机名立刻生效,执行如下命令： hostname -F /etc/hostname 主机IP和域名映射文件 /etc/hosts 文件内容为： 192.168.99.100 alpine.csdn.net DNS 服务器配置文件 /etc/resolv.conf 文件内容为： nameserver 218.2.135.1 nameserver 202.102.24.35 网卡配置文件 /etc/network/interfaces 文件内容为： auto lo iface lo inet loopback auto eth0 iface eth0 inet static address 192.168.3.166 netmask 255.255.255.0 gateway 192.168.3.254 修改完相关配置以后，重新启动网络服务： /etc/init.d/networking restart 网络相关的文档，详细参见：https://wiki.alpinelinux.org/wiki/Configure_Networking 4.2更新国内源 Alpine的源文件为： /etc/apk/repositories， 默认的源地址为：http://dl-cdn.alpinelinux.org/ 可以编辑源文件 /etc/apk/repositories， 采用国内阿里云的源，文件内容为： https://mirrors.aliyun.com/alpine/v3.6/main/ https://mirrors.aliyun.com/alpine/v3.6/community/ 如果采用中国科技大学的源，文件内容为： https://mirrors.ustc.edu.cn/alpine/v3.6/main/ https://mirrors.ustc.edu.cn/alpine/v3.6/community/ 4.3软件包管理工具apk的基本使用 alpine 提供了非常好用的apk软件包管理工具， 可以方便地安装、删除、更新软件。 查询openssh相关的软件包 apk search openssh 安装一个软件包 apk add xxx 删除已安装的xxx软件包 apk del xxx 获取更多apk包管理的命令参数 apk --help 比如安装常用的网络相关工具： 更新软件包索引文件 apk update 用于文本方式查看网页，用于测试http协议 apk add curl 提供了查看网络连接的协议端口的命令ss，可以替代netstat命令 apk add iproute2 drill 命令可以替代dig和nslookup DNS查询命令 apk add drill 测试192.168.3.166的80端口，查看web服务是否能正常访问。 curl 192.168.3.166 查看建立的TCP连接 ss -ta 查询域名的信息 drill blog.csdn.net @8.8.8.8 根据IP地址，反向查找域名 drill -x 8.8.8.8 @47.94.71.34 4.4开启SSH服务 安装openssh-server服务器 apk add openssh-server 修改配置文件 /etc/ssh/sshd_config， 如果要想使用root用户远程管理，需要修改参数为： PermitRootLogin yes 将ssh服务配置为开机自动启动 rc-update add sshd 如果你想立刻生效，可以执行命令： /etc/init.d/sshd restart 4.5安装nginx 安装Nginx软件并更新到最新， apk add --update nginx 手工启动Nginx /etc/init.d/nginx 将Nginx添加到启动服务中，下次开机自动运行 rc-update add nginx 测试Nginx服务是否正常,使用curl访问， 默认配置会返回nginx的404页面错误，标明服务已正常： curl 192.168.3.166 【附图】 01-在Docker主机中，下载alpine镜像 02-查看镜像信息，运行alpine容器，查看容器信息 03-在Alpine容器系统中安装常用网络工具-完成部分安装 04-完成常用网络工具的安装 05-在容器中，查看Alpine容器的IP地址 06-在Docker虚拟主机中使用docker build生成Docker镜像的过程 07-生成Docker镜像的大小，只有36.5MB 08-网络相关配置文件及内容 09-重启网络服务 networking restart 10-软件仓库源的文件内容 11-apk软件包管理常用命令-updae-search-add-del 12-使用curl查看Nginx网站的页面反馈-查看TCP网络状态 13-使用drill查询blog.csdn.net网站域名信息1 13-使用drill查询blog.csdn.net网站域名信息2 14-修改ssh配置文件，运行Root用户使用ssh登录 15-使用Xshell客户端工具，ssh登录到3.166的Alpine机器上 16-更新APK软件包仓库的索引文件 17-安装Nginx 18-重启Nginx服务-将Nginx设置为开机自动启动 【注意事项】:因为Alpine采用的是musl libc，不是通常用的glibc，在使用DNS时，Alpine（musl libc）在DNS解析文件/etc/resolv.conf中，不使用domain或 search选项。在使用DNS作为服务发现时，要查看相应的文档来解决。相关链接：http://gliderlabs.viewdocs.io/docker-alpine/caveats/ 【心得体会】： http://wiki.alpinelinux.org 网站上内容非常丰富，英文也非常简单，几乎所有的问题都能在该网站上找到答案，强烈推荐该网站。 【参考链接】： Alpine Linux package management http://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management Alpine Linux，一个只有5M的Docker镜像 http://www.infoq.com/cn/news/2016/01/Alpine-Linux-5M-Docker Alpine Linux 源使用帮助 http://mirrors.ustc.edu.cn/help/alpine.html Alpine Linux配置使用技巧【一个只有5M的操作系统（转）】 http://www.cnblogs.com/zhangmingcheng/p/7122386.html docker（10）：virtualbox安装使用 alpinelinux http://blog.csdn.net/freewebsys/article/details/53638227 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-22 11:38:30 "},"docker/dockerbiji/":{"url":"docker/dockerbiji/","title":"docker使用笔记","keywords":"","body":"这个一个docker笔记。 Copyright © iroyway 2019 all right reserved.powered by Gitbook all right reserved，powered by Gitbook该文章修订时间： 2021-05-22 12:37:28 "}}